#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Read a PHYLIP-format file and produce an appropriate config file for passing to `dnapars`.

`dnapars` is a rather old program that doesn't play very well in a
pipeline.  It prompts the user for configuration information and reads
responses from stdin.  The config file generated by this script is
meant to mimic the responses to the expected prompts.

Typical usage is,

     $ mkconfig.py sequence.phy >dnapars.cfg
     $ dnapars <dnapars.cfg

For reference, the dnapars configuration prompt looks like this:
____________
Please enter a new file name> dummy.phylip

DNA parsimony algorithm, version 3.696

Setting for this run:
  U                 Search for best tree?  Yes
  S                        Search option?  More thorough search
  V              Number of trees to save?  10000
  J   Randomize input order of sequences?  No. Use input order
  O                        Outgroup root?  No, use as outgroup species  1
  T              Use Threshold parsimony?  No, use ordinary parsimony
  N           Use Transversion parsimony?  No, count all steps
  W                       Sites weighted?  No
  M           Analyze multiple data sets?  No
  I          Input sequences interleaved?  Yes
  0   Terminal type (IBM PC, ANSI, none)?  ANSI
  1    Print out the data at start of run  No
  2  Print indications of progress of run  Yes
  3                        Print out tree  Yes
  4          Print out steps in each site  No
  5  Print sequences at all nodes of tree  No
  6       Write out trees onto tree file?  Yes

  Y to accept these or type the letter for one to change
____________

"""
import os
import argparse
from warnings import warn

def extract_naive(file, inferred_naive_name):
    with open( file, 'r' ) as fh:
        for lineno, line in enumerate(fh):
            if len(line.split()) > 0 and line.split()[0] == inferred_naive_name:
                return lineno

def main():

    def existing_file(fname):
        """
        Argparse type for an existing file
        """
        if not os.path.isfile(fname):
            raise ValueError("Invalid file: " + str(fname))
        return fname

    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument('phylip', nargs=1, help='PHYLIP input', type=existing_file)
    parser.add_argument('treeprog', help='dnaml or dnapars', type=str)

    args = parser.parse_args()

    # Note that we have hardcoded `naive` as the translation for the inferred_naive_name in bin/make_phylip.py, so this will always be the name we look for here.
    naive = extract_naive(args.phylip[0], 'naive')

    print("{}".format(os.path.basename(args.phylip[0])))		# phylip input file
    if naive:
        print("O")						# Outgroup root
        print("{}".format(naive))		# naive index in phylip
    else:
        warn("No na√Øve sequence found!")
    if args.treeprog == 'dnapars':
        print('S')
        print('Y')
        print('J')
        print('13')
        print('10')
        print('4')
        print('5')
        print('.')
        print('Y')
    elif args.treeprog == 'dnaml':
        print("R") # gamma
        print("5")                                         # Reconstruct hypothetical seq
        print("Y")                                         # accept these
        print("1.41421356237") # CV = sqrt(2) (alpha = .5)
        print("4") # 4 catagories
    else:
        raise RuntimeError('treeprog=' + args.treeprog + ' is not "dnaml" or "dnapars"')

if __name__ == "__main__":
   main()
